# Generated by Django 5.2.4 on 2025-10-09 08:07

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChannelWhitelist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_id', models.CharField(max_length=100, unique=True)),
                ('channel_name', models.CharField(max_length=200)),
                ('channel_url', models.URLField(blank=True, max_length=100)),
                ('thumbnail_url', models.URLField()),
                ('subscriber_count', models.IntegerField(blank=True, null=True)),
                ('videos_count', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='whitelisted_channels', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Whitelisted_Channel',
                'verbose_name_plural': 'Whitelisted_Channels',
                'ordering': ['-date_added'],
            },
        ),
        migrations.CreateModel(
            name='ChannelCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channel_category', to=settings.AUTH_USER_MODEL)),
                ('channels', models.ManyToManyField(blank=True, related_name='categories', to='api.channelwhitelist')),
            ],
            options={
                'verbose_name': ['Channel Category'],
                'verbose_name_plural': ['Channel Categories'],
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SyncLogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sync_type', models.CharField(choices=[('full', 'Fully Sync'), ('partial', 'Partially Sync'), ('pull_extension', 'Pull Extension'), ('push_extentsion', 'Push Extension'), ('api_update', 'Api Update')], max_length=50)),
                ('status', models.CharField(choices=[('success', 'Success'), ('pending', 'Pending'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('channels_synced', models.IntegerField(default=0)),
                ('channels_added', models.IntegerField(default=0)),
                ('channels_deleted', models.IntegerField(default=0)),
                ('error_message', models.TextField(max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=500)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synclogs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': ['Sync Log'],
                'verbose_name_plural': ['Sync Logs'],
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strict_mode', models.BooleanField(default=False, help_text='If true hide all whiteslited channels, if false highlight them')),
                ('auto_sync', models.BooleanField(default=True, help_text='Automatically sync whitelist with browser')),
                ('default', models.CharField(choices=[('grid', 'Grid'), ('list', 'List')], default='grid', max_length=50)),
                ('theme', models.CharField(choices=[('auto', 'Auto'), ('black', 'Black'), ('white', 'White')], default='auto', max_length=50)),
                ('total_channels_added', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='whitelist_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': ['User Profile'],
                'verbose_name_plural': ['User Profiles'],
            },
        ),
        migrations.AddIndex(
            model_name='channelwhitelist',
            index=models.Index(fields=['channel_id'], name='api_channel_channel_4d886f_idx'),
        ),
        migrations.AddIndex(
            model_name='channelwhitelist',
            index=models.Index(fields=['user', 'is_active'], name='api_channel_user_id_f401d4_idx'),
        ),
        migrations.AddIndex(
            model_name='channelwhitelist',
            index=models.Index(fields=['date_added'], name='api_channel_date_ad_2bb571_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='channelwhitelist',
            unique_together={('user', 'channel_id')},
        ),
        migrations.AlterUniqueTogether(
            name='channelcategory',
            unique_together={('name', 'user')},
        ),
        migrations.AddIndex(
            model_name='synclogs',
            index=models.Index(fields=['user', 'timestamp'], name='api_synclog_user_id_34831a_idx'),
        ),
        migrations.AddIndex(
            model_name='synclogs',
            index=models.Index(fields=['status'], name='api_synclog_status_fab57a_idx'),
        ),
    ]
